import React from 'react';
import {
  Box,
  Chip,
  Paper,
  Typography,
  useTheme,
  alpha,
  Tooltip,
  Avatar,
  Grid,
  Divider
} from '@mui/material';
import { BugReport, TrendingUp, Category } from '@mui/icons-material';
import { Vulnerability } from '~/hooks/fetching/artifact';
import { getThreatTypeInfo, getRiskLevelInfo, getConfidenceDisplay } from '~/utils/vulnerability-display';

interface EnhancedVulnerabilityCardProps {
  vulnerability: Vulnerability;
  onClick?: () => void;
}

export const EnhancedVulnerabilityCard: React.FC<EnhancedVulnerabilityCardProps> = ({
  vulnerability,
  onClick
}) => {
  const theme = useTheme();
  
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical": return theme.palette.error.main;
      case "high": return theme.palette.warning.main;
      case "medium": return theme.palette.info.main;
      case "low": return theme.palette.success.main;
      case "negligible": return theme.palette.grey[400];
      default: return theme.palette.grey[500];
    }
  };

  const threatTypeInfo = vulnerability.threatType ? getThreatTypeInfo(vulnerability.threatType) : null;
  const riskLevelInfo = vulnerability.riskLevel ? getRiskLevelInfo(vulnerability.riskLevel) : null;
  const confidenceInfo = vulnerability.confidence ? getConfidenceDisplay(vulnerability.confidence) : null;

  return (
    <Paper
      elevation={0}
      sx={{
        p: 3,
        mb: 2,
        border: `1px solid ${theme.palette.divider}`,
        borderLeft: `5px solid ${getSeverityColor(vulnerability.severity)}`,
        borderRadius: 2,
        cursor: onClick ? 'pointer' : 'default',
        transition: 'all 0.2s ease',
        '&:hover': onClick ? {
          boxShadow: `0px 4px 20px ${alpha(theme.palette.primary.main, 0.1)}`,
          transform: 'translateY(-2px)'
        } : {}
      }}
      onClick={onClick}
    >
      <Grid container spacing={2}>
        {/* Main vulnerability info */}
        <Grid item xs={12} md={8}>
          <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
            <Avatar
              sx={{
                bgcolor: getSeverityColor(vulnerability.severity),
                color: 'white',
                width: 48,
                height: 48,
                mr: 2
              }}
            >
              <BugReport />
            </Avatar>
            <Box sx={{ flex: 1, minWidth: 0 }}>
              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 0.5 }}>
                {vulnerability.cveId}
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                {vulnerability.description}
              </Typography>
              
              {/* CVE and CVSS Info */}
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                <Chip
                  label={vulnerability.severity}
                  size="small"
                  sx={{
                    backgroundColor: getSeverityColor(vulnerability.severity),
                    color: 'white',
                    fontWeight: 'bold'
                  }}
                />
                {vulnerability.score && (
                  <Chip
                    label={`CVSS: ${vulnerability.score.toFixed(1)}`}
                    size="small"
                    variant="outlined"
                  />
                )}
              </Box>

              {/* CWEs */}
              {vulnerability.cwes && vulnerability.cwes.length > 0 && (
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  <Typography variant="caption" color="text.secondary" sx={{ mr: 1, alignSelf: 'center' }}>
                    CWEs:
                  </Typography>
                  {vulnerability.cwes.slice(0, 3).map((cwe, index) => (
                    <Chip
                      key={index}
                      label={cwe}
                      size="small"
                      variant="outlined"
                      sx={{ fontSize: '0.7rem' }}
                    />
                  ))}
                  {vulnerability.cwes.length > 3 && (
                    <Chip
                      label={`+${vulnerability.cwes.length - 3} more`}
                      size="small"
                      variant="outlined"
                      color="primary"
                      sx={{ fontSize: '0.7rem' }}
                    />
                  )}
                </Box>
              )}
            </Box>
          </Box>
        </Grid>

        {/* Enhanced threat information */}
        <Grid item xs={12} md={4}>
          <Box sx={{ 
            height: '100%', 
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'space-between',
            pl: { md: 2 }
          }}>
            
            {/* Primary Threat Type */}
            {threatTypeInfo && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 0.5 }}>
                  Primary Threat Type
                </Typography>
                <Tooltip title={threatTypeInfo.shortDescription}>
                  <Chip
                    icon={<threatTypeInfo.icon sx={{ fontSize: '16px !important' }} />}
                    label={threatTypeInfo.name}
                    size="small"
                    sx={{
                      backgroundColor: alpha(threatTypeInfo.color, 0.1),
                      color: threatTypeInfo.color,
                      border: `1px solid ${alpha(threatTypeInfo.color, 0.3)}`,
                      fontWeight: 'medium',
                      '& .MuiChip-icon': {
                        color: threatTypeInfo.color
                      }
                    }}
                  />
                </Tooltip>
              </Box>
            )}

            {/* Alternative Threat Categories */}
            {vulnerability.threatCategories && vulnerability.threatCategories.length > 1 && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 0.5 }}>
                  Alternative Categories
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                  {vulnerability.threatCategories.slice(1, 3).map((category, index) => {
                    const categoryInfo = getThreatTypeInfo(category);
                    return (
                      <Chip
                        key={index}
                        label={categoryInfo.name}
                        size="small"
                        variant="outlined"
                        sx={{
                          fontSize: '0.7rem',
                          borderColor: alpha(categoryInfo.color, 0.5),
                          color: categoryInfo.color
                        }}
                      />
                    );
                  })}
                </Box>
              </Box>
            )}

            {/* Risk Level and Confidence */}
            <Box>
              {riskLevelInfo && (
                <Box sx={{ mb: 1 }}>
                  <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 0.5 }}>
                    Risk Assessment
                  </Typography>
                  <Chip
                    icon={<TrendingUp sx={{ fontSize: '16px !important' }} />}
                    label={riskLevelInfo.label}
                    size="small"
                    sx={{
                      backgroundColor: riskLevelInfo.backgroundColor,
                      color: riskLevelInfo.color,
                      fontWeight: 'medium',
                      '& .MuiChip-icon': {
                        color: riskLevelInfo.color
                      }
                    }}
                  />
                </Box>
              )}

              {confidenceInfo && (
                <Box>
                  <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 0.5 }}>
                    Mapping Confidence
                  </Typography>
                  <Chip
                    label={`${Math.round((vulnerability.confidence || 0) * 100)}% - ${confidenceInfo.label}`}
                    size="small"
                    variant="outlined"
                    sx={{
                      fontSize: '0.7rem',
                      borderColor: confidenceInfo.color,
                      color: confidenceInfo.color
                    }}
                  />
                </Box>
              )}
            </Box>
          </Box>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default EnhancedVulnerabilityCard;
