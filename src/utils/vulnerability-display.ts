import { 
  Security, 
  BugReport, 
  DataObject, 
  Info, 
  Warning, 
  Block,
  VerifiedUser,
  Shield
} from '@mui/icons-material';
import { alpha } from '@mui/material';

export interface ThreatTypeInfo {
  name: string;
  color: string;
  icon: any;
  description: string;
  shortDescription: string;
}

export const getThreatTypeInfo = (threatType: string): ThreatTypeInfo => {
  switch (threatType) {
    case 'Spoofing':
      return {
        name: 'Spoofing',
        color: '#FF5722',
        icon: VerifiedUser,
        description: 'Threat action aimed at accessing and use of another user\'s credentials, such as username and password.',
        shortDescription: 'Identity theft and credential abuse'
      };
    case 'Tampering':
      return {
        name: 'Tampering',
        color: '#FF9800',
        icon: DataObject,
        description: 'Threat action intending to maliciously change or modify persistent data, such as records in a database, and the alteration of data in transit between two computers over an open network, such as the Internet.',
        shortDescription: 'Data modification and integrity compromise'
      };
    case 'Repudiation':
      return {
        name: 'Repudiation',
        color: '#9C27B0',
        icon: Warning,
        description: 'Threat action aimed at performing prohibited operations in a system that lacks the ability to trace the operations.',
        shortDescription: 'Non-repudiation and audit trail issues'
      };
    case 'Information Disclosure':
      return {
        name: 'Information Disclosure',
        color: '#2196F3',
        icon: Info,
        description: 'Threat action intending to read a file that one was not granted access to, or to read data in transit.',
        shortDescription: 'Unauthorized information access'
      };
    case 'Denial of Service':
      return {
        name: 'Denial of Service',
        color: '#F44336',
        icon: Block,
        description: 'Threat action attempting to deny access to valid users, such as by making a web server temporarily unavailable or unusable.',
        shortDescription: 'Service availability compromise'
      };
    case 'Elevation of Privilege':
      return {
        name: 'Elevation of Privilege',
        color: '#795548',
        icon: Security,
        description: 'Threat action intending to gain privileged access to resources in order to gain unauthorized access to information or to compromise a system.',
        shortDescription: 'Unauthorized privilege escalation'
      };
    default:
      return {
        name: 'Unknown',
        color: '#757575',
        icon: BugReport,
        description: 'Unknown threat type',
        shortDescription: 'Unknown threat classification'
      };
  }
};

export const getRiskLevelInfo = (riskLevel: string) => {
  switch (riskLevel?.toUpperCase()) {
    case 'CRITICAL':
      return {
        color: '#D32F2F',
        backgroundColor: alpha('#D32F2F', 0.1),
        label: 'Critical Risk'
      };
    case 'HIGH':
      return {
        color: '#F57C00',
        backgroundColor: alpha('#F57C00', 0.1),
        label: 'High Risk'
      };
    case 'MEDIUM':
      return {
        color: '#1976D2',
        backgroundColor: alpha('#1976D2', 0.1),
        label: 'Medium Risk'
      };
    case 'LOW':
      return {
        color: '#388E3C',
        backgroundColor: alpha('#388E3C', 0.1),
        label: 'Low Risk'
      };
    default:
      return {
        color: '#757575',
        backgroundColor: alpha('#757575', 0.1),
        label: 'Unknown Risk'
      };
  }
};

export const getConfidenceDisplay = (confidence: number): { color: string; label: string } => {
  if (confidence >= 0.8) {
    return { color: '#4CAF50', label: 'High Confidence' };
  } else if (confidence >= 0.6) {
    return { color: '#FF9800', label: 'Medium Confidence' };
  } else if (confidence >= 0.4) {
    return { color: '#F44336', label: 'Low Confidence' };
  } else {
    return { color: '#757575', label: 'Very Low Confidence' };
  }
};

// Get all available threat types for filtering
export const getAllThreatTypes = (): string[] => {
  return [
    'Spoofing',
    'Tampering', 
    'Repudiation',
    'Information Disclosure',
    'Denial of Service',
    'Elevation of Privilege'
  ];
};
